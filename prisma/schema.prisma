// https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

// next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Ingredient {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name      String
//   recipes  RecipeToIngredient[]
// }
model Instruction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stepNumber      Int 
  instruction      String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  Int
  @@unique ([recipeId, stepNumber], name: "stepIdentifier")
}

model Recipe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  slug      String  
  // instructions String
  ingredients String
  instructions Instruction[]
  // ingredients RecipeToIngredient[]
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  duration Int
  serves Int
  tags Tag[]
  @@unique ([authorId, title], name: "titleIdentifier")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  recipes  Recipe[]
}

// model RecipeToIngredient {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   recipe    Recipe   @relation(fields: [recipeId], references: [id])
//   recipeId  Int
//   ingredient Ingredient @relation(fields: [ingredientId], references: [id])
//   ingredientId Int
//   quantityOfMeasurement String
// }